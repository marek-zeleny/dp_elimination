#include <catch2/catch_test_macros.hpp>
#include "io/cnf_writer.hpp"

#include <sstream>
#include <fstream>
#include <filesystem>

TEST_CASE("CnfWriter functionality", "[CnfWriter]") {
    using namespace dp;
    std::ostringstream oss;

    SECTION("Writes clauses to a stream") {
        CnfWriter writer(oss, 3, 2);
        writer.write_clause({1, -2}).write_clause({2, 3});
        writer.finish();

        std::string expected_output =
                "c This file was generated by the dp program\n"
                "c\n"
                "p cnf 3 2\n"
                "1 -2 0\n"
                "2 3 0\n";
        REQUIRE(oss.str() == expected_output);
    }

    SECTION("Exception for writing after finish") {
        CnfWriter writer(oss, 3, 1);
        writer.write_clause({1, -2});
        writer.finish();
        REQUIRE_THROWS_AS(writer.write_clause({2, 3}), CnfWriter::failure);
    }

    SECTION("Exception for exceeding predefined number of clauses") {
        CnfWriter writer(oss, 3, 1);
        writer.write_clause({1, -2});
        REQUIRE_THROWS_AS(writer.write_clause({2, 3}), CnfWriter::failure);
    }

    SECTION("Exception for including zero literal") {
        CnfWriter writer(oss, 3, 2);
        REQUIRE_THROWS_AS(writer.write_clause({1, 0}), CnfWriter::failure);
    }

    SECTION("Exception for literal outside of defined variable range") {
        CnfWriter writer(oss, 3, 2);
        REQUIRE_THROWS_AS(writer.write_clause({1, 4}), CnfWriter::failure);
    }

    SECTION("Exception for insufficient clauses on finish") {
        CnfWriter writer(oss, 3, 2);
        writer.write_clause({1, -2});
        REQUIRE_THROWS_AS(writer.finish(), CnfWriter::failure);
    }

    SECTION("Writes to a file and verifies contents") {
        std::string file_name = "test_cnf_output.cnf";
        {
            CnfWriter writer(file_name, 3, 1);
            writer.write_clause({1, -2});
            writer.finish();
        } // Scope ensures file is closed and writer is destructed

        std::ifstream file(file_name);
        std::stringstream buffer;
        buffer << file.rdbuf();
        std::string content = buffer.str();
        std::string expected_content =
                "c This file was generated by the dp program\n"
                "c\n"
                "p cnf 3 1\n"
                "1 -2 0\n";
        REQUIRE(content == expected_content);

        std::filesystem::remove(file_name);
    }

    SECTION("write_vector_to_file writes expected content") {
        std::string file_name = "test_vector_cnf_output.cnf";
        dp::CnfWriter::Clause clause1 = {1, -2};
        dp::CnfWriter::Clause clause2 = {2, 3};
        std::vector<dp::CnfWriter::Clause> clauses = {clause1, clause2};

        dp::CnfWriter::write_vector_to_file(clauses, file_name);

        std::ifstream file(file_name);
        std::stringstream buffer;
        buffer << file.rdbuf();
        std::string content = buffer.str();
        std::string expected_content =
                "c This file was generated by the dp program\n"
                "c\n"
                "p cnf 3 2\n"
                "1 -2 0\n"
                "2 3 0\n";
        REQUIRE(content == expected_content);

        std::filesystem::remove(file_name);
    }

}
