#include "io/cnf_writer.hpp"

#include <sstream>
#include <iostream>
#include <algorithm>
#include <simple_logger.h>

namespace dp {

void CnfWriter::write_vector_to_file(const std::vector<Clause> &clauses, const std::string &file_name) {
    size_t num_clauses = clauses.size();
    size_t max_var = 0;
    for (auto &c: clauses) {
        for (auto &l: c) {
            auto var = static_cast<size_t>(std::abs(l));
            max_var = std::max(max_var, var);
        }
    }
    CnfWriter writer(file_name, max_var, num_clauses);
    for (auto &c: clauses) {
        writer.write_clause(c);
    }
    writer.finish();
}

CnfWriter::CnfWriter(std::ostream &output, const size_t max_var, const size_t num_clauses) :
        m_output(output), m_max_var(max_var), m_num_clauses(num_clauses) {
    write_header();
}

CnfWriter::CnfWriter(const std::string &file_name, const size_t max_var, const size_t num_clauses) :
        m_file(file_name), m_output(m_file), m_max_var(max_var), m_num_clauses(num_clauses) {
    LOG_DEBUG << "opening file " << file_name;
    if (!m_file.is_open()) {
        throw failure("failed to open the output file " + file_name);
    }
    write_header();
}

CnfWriter &CnfWriter::write_clause(const Clause &clause) {
    if (finished) {
        throw failure("this writer has already finished writing the whole formula");
    }
    if (m_clause_count >= m_num_clauses) {
        throw failure("the formula already contains the defined number of clauses (" +
                      std::to_string(m_num_clauses) + ")");
    }
    for (auto &&l: clause) {
        if (l == 0) {
            throw failure("the formula cannot have a zero (0) literal");
        }
        m_output << l << " ";
        Var v = (Var) std::abs(l);
        if (v > m_max_var) {
            throw failure("literal " + std::to_string(v) + " outside of the defined range (" +
                          std::to_string(m_max_var) + ")");
        }
    }
    m_output << "0" << std::endl;
    ++m_clause_count;
    return *this;
}

void CnfWriter::finish() {
    if (finished) {
        throw failure("this writer has already finished writing the whole formula");
    }
    if (m_clause_count < m_num_clauses) {
        throw failure("the formula contains less clauses (" + std::to_string(m_clause_count)
                      + ") than the defined number (" + std::to_string(m_num_clauses) + ")");
    }
    m_output.flush();
    if (m_file.is_open()) {
        m_file.close();
    }
    if (!m_output) {
        throw failure("error encountered while writing into the output file");
    }
    finished = true;
    LOG_INFO << "CNF formula successfully written";
}

void CnfWriter::write_header() {
    LOG_INFO << "writing CNF formula with " << m_max_var << " variables and " << m_num_clauses << " clauses";
    m_output << "c This file was generated by the dp program" << std::endl;
    m_output << "c" << std::endl;
    m_output << "p cnf " << m_max_var << " " << m_num_clauses << std::endl;
}

CnfWriter::failure::failure(const std::string &what_arg) :
        std::runtime_error(construct_msg(what_arg)) {}

std::string CnfWriter::failure::construct_msg(const std::string &msg) {
    std::ostringstream oss;
    oss << "Invalid CNF output file: " << msg;
    return oss.str();
}

} // namespace dp
